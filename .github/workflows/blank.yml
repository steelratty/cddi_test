name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  LOG_FILE_NAME: log.txt

jobs:
  build_job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build and create log
        run: |
          echo "---Build Started---" | tee "${LOG_FILE_NAME}"
          echo "Building the application..." | tee -a "${LOG_FILE_NAME}"
          echo "---Build Completed---" | tee -a "${LOG_FILE_NAME}"

      - name: Upload log (after build)
        uses: actions/upload-artifact@v4
        with:
          name: log-after-build
          path: ${{ env.LOG_FILE_NAME }}
          retention-days: 7

  test_job1:
    needs: build_job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download log from build
        uses: actions/download-artifact@v4
        with:
          name: log-after-build

      - name: Run Test 1
        run: |
          test -f "${LOG_FILE_NAME}"
          echo "---Test Job 1 Started---" | tee -a "${LOG_FILE_NAME}"
          echo "Running unit tests..." | tee -a "${LOG_FILE_NAME}"
          echo "---Test Job 1 Completed---" | tee -a "${LOG_FILE_NAME}"

      - name: Upload log (after test1)
        uses: actions/upload-artifact@v4
        with:
          name: log-after-test1
          path: ${{ env.LOG_FILE_NAME }}
          retention-days: 7

  test_job2:
    needs: test_job1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download log from test1
        uses: actions/download-artifact@v4
        with:
          name: log-after-test1

      - name: Run Test 2
        run: |
          test -f "${LOG_FILE_NAME}"
          echo "---Test Job 2 Started---" | tee -a "${LOG_FILE_NAME}"
          echo "Running integration tests..." | tee -a "${LOG_FILE_NAME}"
          echo "---Test Job 2 Completed---" | tee -a "${LOG_FILE_NAME}"

      - name: Upload log (after test2)
        uses: actions/upload-artifact@v4
        with:
          name: log-after-test2
          path: ${{ env.LOG_FILE_NAME }}
          retention-days: 7

  test_job3:
    needs: test_job2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download log from test2
        uses: actions/download-artifact@v4
        with:
          name: log-after-test2

      - name: Run Test 3
        run: |
          test -f "${LOG_FILE_NAME}"
          echo "---Test Job 3 Started---" | tee -a "${LOG_FILE_NAME}"
          echo "Running E2E tests..." | tee -a "${LOG_FILE_NAME}"
          echo "---Test Job 3 Completed---" | tee -a "${LOG_FILE_NAME}"

      - name: Upload log (after test3)
        uses: actions/upload-artifact@v4
        with:
          name: log-after-test3
          path: ${{ env.LOG_FILE_NAME }}
          retention-days: 7

  deploy_to_dev_job:
    needs: test_job3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download log from test3
        uses: actions/download-artifact@v4
        with:
          name: log-after-test3

      - name: Deploy to DEV
        run: |
          test -f "${LOG_FILE_NAME}"
          echo "---Deploy to DEV Started---" | tee -a "${LOG_FILE_NAME}"
          echo "Deploying to DEV..." | tee -a "${LOG_FILE_NAME}"
          echo "---Deploy to DEV Completed---" | tee -a "${LOG_FILE_NAME}"

          echo "========= MERGED LOG (DEV) ========="
          wc -c "${LOG_FILE_NAME}" | awk '{print "size(bytes):",$1}'
          cat -n "${LOG_FILE_NAME}"

      - name: Upload log (after dev deploy)
        uses: actions/upload-artifact@v4
        with:
          name: log-after-dev
          path: ${{ env.LOG_FILE_NAME }}
          retention-days: 7

  deploy_to_prd_job:
    needs: deploy_to_dev_job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download log from dev deploy
        uses: actions/download-artifact@v4
        with:
          name: log-after-dev

      - name: Deploy to PROD
        run: |
          test -f "${LOG_FILE_NAME}"
          echo "---Deploy to PROD Started---" | tee -a "${LOG_FILE_NAME}"
          echo "Deploying to PRODUCTION..." | tee -a "${LOG_FILE_NAME}"
          echo "---Deploy to PROD Completed---" | tee -a "${LOG_FILE_NAME}"

          echo "========= MERGED LOG (PROD) ========="
          wc -c "${LOG_FILE_NAME}" | awk '{print "size(bytes):",$1}'
          cat -n "${LOG_FILE_NAME}"
